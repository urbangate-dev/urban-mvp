generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  name          String
  email         String   @unique
  walletAddress String   @unique
  role          String
  investorType  String
  state         String
  approved      Boolean  @default(false)
  loans         Loan[]   @relation("userLoans")
}

model Property {
  id                       Int      @id @default(autoincrement())
  createdAt                DateTime @default(now())
  address                  String
  dealDescription          String
  propertyDescription      String
  city                     String
  state                    String
  zip                      String
  propertyType             String
  bathroom                 Int
  bedroom                  Int
  sqft                     Int
  loanAsIsValue            Float
  loanARVValue             Float
  loanToCostValue          Float
  loanAmount               Float
  yieldPercent             Float
  maturityDate             String
  borrower                 String
  rehabBudget              Float
  exitStrategy             String
  borrowerExperience       String
  borrowerNumberOfDeals    Int
  borrowerDescription      String
  investorPresentationLink String
  draft                    Boolean
  term                     Int
  additional               String[]
  thumbnail                String
  propertyIndex            String?
  remainingAmount          Int?
  paid                     Boolean?
  loans                    Loan[]   @relation("propertyLoans")
}

model Loan {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  loanAmount      Float
  loanToARV       Float     @map("ARV")
  loanToAsIs      Float     @map("as_is")
  loanToCost      Float     @map("to_cost")
  term            Int
  propertyId      Int?      @map("property")
  userId          Int?      @map("user")
  returnValue     Float
  pending         Boolean
  walletAddress   String?
  loanIndex       String?
  funding         Boolean
  paid            Boolean
  propertyAddress String    @default("")
  property        Property? @relation("propertyLoans", fields: [propertyId], references: [id])
  user            User?     @relation("userLoans", fields: [userId], references: [id])
  payments        Payment[] @relation("payments")
}

model Payment {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  balance      Int
  paymentDate  String
  loanId       Int?
  paymentIndex String?
  status       String
  tx           String
  Loan         Loan?    @relation("payments", fields: [loanId], references: [id])
}

model WalletAddress {
  id      Int    @id @default(autoincrement())
  address String @unique
}
