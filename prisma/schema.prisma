generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

// Define the data model for the User
model User {
    id            Int      @id @default(autoincrement())
    createdAt     DateTime @default(now())
    name          String
    email         String
    walletAddress String
    role          String
    loans         Loan[]   @relation("userLoans")
}

// Define the data model for the Property
model Property {
    id                       Int      @id @default(autoincrement())
    createdAt                DateTime @default(now())
    address                  String
    dealDescription          String
    propertyDescription      String
    city                     String
    state                    String
    zip                      String
    propertyType             String
    bathroom                 Int
    bedroom                  Int
    sqft                     Int
    loanAsIsValue            Float
    loanARVValue             Float
    loanToCostValue          Float
    loanAmount               Float
    yieldPercent             Float
    maturityDate             String
    term                     Int
    borrower                 String
    rehabBudget              Float
    exitStrategy             String
    borrowerExperience       String
    borrowerNumberOfDeals    Int
    borrowerDescription      String
    investorPresentationLink String
    draft                    Boolean
    loans                    Loan[]   @relation("propertyLoans")
}

// Define the data model for the Loan
model Loan {
    id            Int       @id @default(autoincrement())
    createdAt     DateTime  @default(now())
    loanAmount    Float
    loanToARV     Float     @map("ARV")
    loanToAsIs    Float     @map("as_is")
    loanToCost    Float     @map("to_cost")
    term          Int
    returnValue   Float
    property      Property? @relation("propertyLoans", fields: [propertyId], references: [id])
    propertyId    Int?      @map("property") // Foreign key reference to Property
    user          User?     @relation("userLoans", fields: [userId], references: [id])
    userId        Int?      @map("user") // Foreign key reference to User
    walletAddress String?
    pending       Boolean
}
